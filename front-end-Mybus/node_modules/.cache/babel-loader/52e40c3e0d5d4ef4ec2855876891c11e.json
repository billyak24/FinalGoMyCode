{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nconst initState = {\n  isLoading: false,\n  isError: false,\n  routes: null\n};\n\nconst routesReducer = (state = initState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_ROUTES_REQUEST:\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case actionTypes.GET_ROUTES_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        routes: action.payload\n      };\n\n    case actionTypes.GET_ROUTES_FAILURE:\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport { routesReducer };","map":{"version":3,"sources":["/Users/mac/Dropbox/Mac/Downloads/redbus-master/front-end-redbus/src/Redux/routes/routesReducer.js"],"names":["actionTypes","initState","isLoading","isError","routes","routesReducer","state","action","type","GET_ROUTES_REQUEST","GET_ROUTES_SUCCESS","payload","GET_ROUTES_FAILURE"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE,KADK;AAEhBC,EAAAA,OAAO,EAAE,KAFO;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAW,CAACS,kBAAjB;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYJ,QAAAA,SAAS,EAAE,IAAvB;AAA6BC,QAAAA,OAAO,EAAE;AAAtC,OAAP;;AACF,SAAKH,WAAW,CAACU,kBAAjB;AACE,aAAO,EACL,GAAGJ,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,MAAM,EAAEG,MAAM,CAACI;AAJV,OAAP;;AAMF,SAAKX,WAAW,CAACY,kBAAjB;AACE,aAAO,EAAE,GAAGN,KAAL;AAAYJ,QAAAA,SAAS,EAAE,KAAvB;AAA8BC,QAAAA,OAAO,EAAE;AAAvC,OAAP;;AACF;AACE,aAAOG,KAAP;AAbJ;AAeD,CAhBD;;AAkBA,SAASD,aAAT","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nconst initState = {\n  isLoading: false,\n  isError: false,\n  routes: null,\n};\n\nconst routesReducer = (state = initState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_ROUTES_REQUEST:\n      return { ...state, isLoading: true, isError: false };\n    case actionTypes.GET_ROUTES_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        routes: action.payload,\n      };\n    case actionTypes.GET_ROUTES_FAILURE:\n      return { ...state, isLoading: false, isError: true };\n    default:\n      return state;\n  }\n};\n\nexport { routesReducer };\n"]},"metadata":{},"sourceType":"module"}