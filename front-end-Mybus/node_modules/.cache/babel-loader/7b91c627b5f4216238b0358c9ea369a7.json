{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nconst loginSuccess = response => {\n  return {\n    type: actionTypes.LOGIN_SUCCESS,\n    payload: response.profileObj\n  };\n};\n\nconst loginFailure = response => {\n  return {\n    type: actionTypes.LOGIN_FAILURE,\n    payload: response.error\n  };\n};\n\nconst logout = () => {\n  return {\n    type: actionTypes.LOGOUT\n  };\n};\n\nconst addCustomerMongoRequest = () => {\n  return {\n    type: actionTypes.ADD_CUSTOMER_MONGO_REQUEST\n  };\n};\n\nconst addCustomerMongoSuccess = id => {\n  return {\n    type: actionTypes.ADD_CUSTOMER_MONGO_SUCCESS,\n    payload: id\n  };\n};\n\nconst addCustomerMongoFailure = () => {\n  return {\n    type: actionTypes.ADD_CUSTOMER_MONGO_FAILURE\n  };\n};\n\nconst addCustomerMongo = profileObj => {\n  return async dispatch => {\n    dispatch(addCustomerMongoRequest());\n\n    try {\n      let customer = {\n        name: profileObj.name,\n        email: profileObj.email,\n        googleId: profileObj.googleId,\n        profilePicture: profileObj.imageUrl\n      };\n      const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/v1/api/customers`, customer);\n      console.log(\"response from db: \", res);\n      dispatch(addCustomerMongoSuccess(res.data._id.toString()));\n    } catch (err) {\n      console.log(\"error\", err);\n      dispatch(addCustomerMongoFailure());\n    }\n  };\n};\n\nexport { loginSuccess, loginFailure, logout, addCustomerMongo };","map":{"version":3,"sources":["/Users/mac/Dropbox/Mac/Downloads/Mybus-master/front-end-Mybus/src/Redux/auth/actions.js"],"names":["actionTypes","axios","loginSuccess","response","type","LOGIN_SUCCESS","payload","profileObj","loginFailure","LOGIN_FAILURE","error","logout","LOGOUT","addCustomerMongoRequest","ADD_CUSTOMER_MONGO_REQUEST","addCustomerMongoSuccess","id","ADD_CUSTOMER_MONGO_SUCCESS","addCustomerMongoFailure","ADD_CUSTOMER_MONGO_FAILURE","addCustomerMongo","dispatch","customer","name","email","googleId","profilePicture","imageUrl","res","post","process","env","REACT_APP_BACKEND_URL","console","log","data","_id","toString","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,YAAY,GAAIC,QAAD,IAAc;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,aADb;AAELC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,GAAP;AAID,CALD;;AAOA,MAAMC,YAAY,GAAIL,QAAD,IAAc;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WAAW,CAACS,aADb;AAELH,IAAAA,OAAO,EAAEH,QAAQ,CAACO;AAFb,GAAP;AAID,CALD;;AAOA,MAAMC,MAAM,GAAG,MAAM;AACnB,SAAO;AACLP,IAAAA,IAAI,EAAEJ,WAAW,CAACY;AADb,GAAP;AAGD,CAJD;;AAMA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,SAAO;AACLT,IAAAA,IAAI,EAAEJ,WAAW,CAACc;AADb,GAAP;AAGD,CAJD;;AAKA,MAAMC,uBAAuB,GAAIC,EAAD,IAAQ;AACtC,SAAO;AACLZ,IAAAA,IAAI,EAAEJ,WAAW,CAACiB,0BADb;AAELX,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CALD;;AAMA,MAAME,uBAAuB,GAAG,MAAM;AACpC,SAAO;AACLd,IAAAA,IAAI,EAAEJ,WAAW,CAACmB;AADb,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIb,UAAD,IAAgB;AACvC,SAAO,MAAOc,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;;AACA,QAAI;AACF,UAAIS,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAEhB,UAAU,CAACgB,IADJ;AAEbC,QAAAA,KAAK,EAAEjB,UAAU,CAACiB,KAFL;AAGbC,QAAAA,QAAQ,EAAElB,UAAU,CAACkB,QAHR;AAIbC,QAAAA,cAAc,EAAEnB,UAAU,CAACoB;AAJd,OAAf;AAMA,YAAMC,GAAG,GAAG,MAAM3B,KAAK,CAAC4B,IAAN,CACf,GAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,mBADrB,EAEhBV,QAFgB,CAAlB;AAIAW,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,GAAlC;AACAP,MAAAA,QAAQ,CAACN,uBAAuB,CAACa,GAAG,CAACO,IAAJ,CAASC,GAAT,CAAaC,QAAb,EAAD,CAAxB,CAAR;AACD,KAbD,CAaE,OAAOC,GAAP,EAAY;AACZL,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,GAArB;AACAjB,MAAAA,QAAQ,CAACH,uBAAuB,EAAxB,CAAR;AACD;AACF,GAnBD;AAoBD,CArBD;;AAsBA,SAAShB,YAAT,EAAuBM,YAAvB,EAAqCG,MAArC,EAA6CS,gBAA7C","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nconst loginSuccess = (response) => {\n  return {\n    type: actionTypes.LOGIN_SUCCESS,\n    payload: response.profileObj,\n  };\n};\n\nconst loginFailure = (response) => {\n  return {\n    type: actionTypes.LOGIN_FAILURE,\n    payload: response.error,\n  };\n};\n\nconst logout = () => {\n  return {\n    type: actionTypes.LOGOUT,\n  };\n};\n\nconst addCustomerMongoRequest = () => {\n  return {\n    type: actionTypes.ADD_CUSTOMER_MONGO_REQUEST,\n  };\n};\nconst addCustomerMongoSuccess = (id) => {\n  return {\n    type: actionTypes.ADD_CUSTOMER_MONGO_SUCCESS,\n    payload: id,\n  };\n};\nconst addCustomerMongoFailure = () => {\n  return {\n    type: actionTypes.ADD_CUSTOMER_MONGO_FAILURE,\n  };\n};\n\nconst addCustomerMongo = (profileObj) => {\n  return async (dispatch) => {\n    dispatch(addCustomerMongoRequest());\n    try {\n      let customer = {\n        name: profileObj.name,\n        email: profileObj.email,\n        googleId: profileObj.googleId,\n        profilePicture: profileObj.imageUrl,\n      };\n      const res = await axios.post(\n        `${process.env.REACT_APP_BACKEND_URL}/v1/api/customers`,\n        customer\n      );\n      console.log(\"response from db: \", res);\n      dispatch(addCustomerMongoSuccess(res.data._id.toString()));\n    } catch (err) {\n      console.log(\"error\", err);\n      dispatch(addCustomerMongoFailure());\n    }\n  };\n};\nexport { loginSuccess, loginFailure, logout, addCustomerMongo };\n"]},"metadata":{},"sourceType":"module"}